/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public TreeNode invertTree(TreeNode root) {
        
        if(root == null)
            return root;
        Queue<TreeNode> nodesQueue = new LinkedList<TreeNode>();
        nodesQueue.add(root);
        
        
        while(!nodesQueue.isEmpty())
        {
            
            TreeNode node = nodesQueue.poll();
            
            TreeNode temp = node.left;
            node.left= node.right ;
            node.right= temp ;
            
            if(node.left != null)
                nodesQueue.add(node.left);
            if(node.right != null)
                nodesQueue.add(node.right);
            
            
            
        }
        return root;
    }
}
